*dpp-ext-toml.txt*	Toml ext for dpp.vim

Author: Shougo <Shougo.Matsu at gmail.com>
License: MIT license

CONTENTS                                               *dpp-ext-toml-contents*

Introduction		|dpp-ext-toml-introduction|
Install			|dpp-ext-toml-install|
Examples		|dpp-ext-toml-examples|
Functions		|dpp-ext-toml-functions|
Actions			|dpp-ext-toml-actions|
Params			|dpp-ext-toml-params|
Toml			|dpp-ext-toml-toml|
Compatibility		|dpp-ext-toml-compatibility|


==============================================================================
INTRODUCTION                                       *dpp-ext-toml-introduction*

This ext implements toml loading.


==============================================================================
INSTALL                                                 *dpp-ext-toml-install*

Please install both "dpp.vim" and "denops.vim".

https://github.com/Shougo/dpp.vim
https://github.com/vim-denops/denops.vim


==============================================================================
EXAMPLES                                               *dpp-ext-toml-examples*
>typescript
	type Toml = {
	  hooks_file?: string;
	  ftplugins?: Record<string, string>;
	  plugins?: Plugin[];
	};

	const [context, options] = await args.contextBuilder.get(args.denops);
	
	const tomlPlugins = await args.dpp.extAction(
	  args.denops,
	  context,
	  options,
	  "toml",
	  "load",
	  {
	    path: "$BASE_DIR/deinlazy.toml",
	    options: {
	      lazy: true,
	    },
	  },
	) as Toml;
<

==============================================================================
FUNCTIONS                                             *dpp-ext-toml-functions*

                                                       *dpp#ext#toml#syntax()*
dpp#ext#toml#syntax()
		Enable dpp specific toml syntax.
		It highlights multiline string as "vim" or "lua" syntax.
		If you use neovim, you should use treesitter highlight
		instead.

==============================================================================
ACTIONS                                                 *dpp-ext-toml-actions*

                                                   *dpp-ext-toml-action-local*
toml
		Returns loaded toml information.
		It has following attributes.

		{ftplugin}:	Loaded ftplugins.
				(Optional)

		{hooks_file}:	Loaded hooks_file.
				(Optional)

		{plugins}:	Loaded plugins.

		params:
			{path}:		toml file path.
					(Required)
			{options}:	default toml plugin's |dpp-options|.
					(Default: {})

==============================================================================
PARAMS                                                   *dpp-ext-toml-params*

==============================================================================
TOML                                                       *dpp-ext-toml-toml*

		TOML file format specification:
		https://github.com/toml-lang/toml

                                                  *dpp-ext-toml-toml-ftplugin*
		ftplugin	(Dictionary)
		"_" key is executed after all ftplugin.
		"{filetype}" key is executed {filetype} ftplugin.
		"lua_{filetype}" key is executed {filetype} ftplugin as
		|:lua|.
		You can define multiple filetypes by "{filetype1}_{filetype2}"
		key.  "b:undo_ftplugin" is defined automatically.

                                                *dpp-ext-toml-toml-hooks_file*
		hooks_file	(String) or (List)
		It is the global |dpp-plugin-options-hooks_file|.

                                                   *dpp-ext-toml-toml-plugins*
		plugins		(Dictionary)
		It is converted to |dpp-plugin-options|.
		"repo" key is needed.

                                              *dpp-toml-toml-multiple_plugins*
		multiple_plugins	(Dictionary)
		"plugins" key is needed.
		NOTE: You need to merge multiple plugins manually.

                                                   *dpp-ext-toml-toml-example*

		TOML file sample is here:
>
		# TOML sample
		hook_add = 'let g:foo = 0'

		[ftplugin]
		# Execute after ftplugin.
		_ = '''
		  setl formatoptions-=ro | setl formatoptions+=mMBl
		'''
		html = '''
		setlocal includeexpr=v:fname->substitute('^\\/','','')
		setlocal path+=./;/
		'''

		[[plugins]]
		repo = 'Shougo/neosnippet.vim'
		on_event = 'InsertEnter'
		on_ft = 'snippet'

		[[plugins]]
		repo = 'rhysd/accelerated-jk'
		on_map = '<Plug>'
		hook_add = '''
		  nnoremap <silent>j <Plug>(accelerated_jk_gj)
		  nnoremap <silent>k <Plug>(accelerated_jk_gk)
		'''
		[plugins.ftplugin]
		python = '''
		let b:undo_ftplugin ..= 'setlocal foldmethod<'
		setlocal foldmethod=indent
		'''

		# "hook_add" is only executed when both "foo" and "bar" are
		# available.
		[[multiple_plugins]]
		plugins = ['foo', 'bar']
		hook_add = '''
		'''
<
==============================================================================
COMPATIBILITY                                     *dpp-ext-toml-compatibility*

==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:noet:
